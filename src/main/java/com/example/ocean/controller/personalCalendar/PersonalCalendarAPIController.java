package com.example.ocean.controller.personalCalendar;

import com.example.ocean.domain.Notification;
import com.example.ocean.dto.request.EventCreateRequest;
import com.example.ocean.dto.request.EventUpdateRequest;
import com.example.ocean.dto.response.EventDetailResponse;
import com.example.ocean.dto.response.CalendarResponse;
import com.example.ocean.security.oauth.UserPrincipal;
import com.example.ocean.service.NotificationService;
import com.example.ocean.service.PersonalCalendarService;
import com.example.ocean.service.UserService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.UUID;

@Slf4j
@RestController
@RequestMapping("/api/calendar/personal")
@RequiredArgsConstructor
public class PersonalCalendarAPIController {

    private final PersonalCalendarService personalCalendarService;
    private final NotificationService notificationService;
    private final UserService userService;

    @GetMapping("/{currentUserId}")
    public ResponseEntity<List<CalendarResponse>> personalCalendar(
            @PathVariable String currentUserId,
            @RequestParam(required = false) String workspaceCd

    ) {
        List<CalendarResponse> result = personalCalendarService.getPersonalEvents(currentUserId, workspaceCd);
        //List <Workspace
        if (result == null || result.isEmpty()) {
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(result);
    }

    @GetMapping("/events/{eventCd}")
    public ResponseEntity<EventDetailResponse> getEventDetail(@PathVariable String eventCd) {
        EventDetailResponse result = personalCalendarService.getPersonalEventDetail(eventCd);
        if (result == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(result);
    }

    @PostMapping(value = "", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<String> createEvent(
            @RequestPart("request") EventCreateRequest eventCreateRequest,
            @RequestPart(value = "attendenceIds", required = false) List<String> attendenceIds,
            @RequestPart(value = "files", required = false) MultipartFile[] files,
            @AuthenticationPrincipal UserDetails userPrincipal
    ) {
        log.info("üìå [Í∞úÏù∏ÏùºÏ†ï] createEvent ÏßÑÏûÖ");

        int result = personalCalendarService.createPersonalEvent(eventCreateRequest, attendenceIds, files);
        log.info("üîç personalCalendarService Í≤∞Í≥º: {}", result);

        if (result == 1) {
            String userId = userPrincipal.getUsername();
            log.info("üë§ Î°úÍ∑∏Ïù∏ Ïú†Ï†Ä ID: {}", userId);

            Notification notification = new Notification();
            notification.setNotiId(UUID.randomUUID().toString());
            notification.setWorkspaceCd(eventCreateRequest.getWorkspaceCd());
            notification.setCreatedBy(userId);
            notification.setNotiState("NEW_EVENT");

            log.info("üì® ÏïåÎ¶º ÏÉùÏÑ± ÏöîÏ≤≠ Í∞ùÏ≤¥: {}", notification);

            try {
                notificationService.createNotification(notification);
                log.info("‚úÖ MAIN_NOTIFICATION Ï†ÄÏû• ÏôÑÎ£å");
            } catch (Exception e) {
                log.error("‚ùå MAIN_NOTIFICATION Ï†ÄÏû• Ïã§Ìå®", e);
            }

            return ResponseEntity.ok("ÏùºÏ†ï Îì±Î°ù ÏÑ±Í≥µ");
        } else {
            log.warn("‚ùå ÏùºÏ†ï Îì±Î°ù Ïã§Ìå®: personalCalendarService Í≤∞Í≥ºÍ∞íÏù¥ {}", result);
            return ResponseEntity.badRequest().body("ÏùºÏ†ï Îì±Î°ù Ïã§Ìå®");
        }
    }


    @PutMapping("/events/{eventCd}")
    public ResponseEntity<String> updateEventDetail(
            @PathVariable String eventCd,
            @RequestPart("request") EventUpdateRequest request,
            @RequestPart(required = false) MultipartFile[] files,
            @RequestPart(required = false) List<String> deletedFileIds,
            @RequestPart(value = "attendenceIds", required = false) List<String> attendenceIds
    ) {

        int result = personalCalendarService.updatePersonalEvent(request, attendenceIds, deletedFileIds, files);

        return result == 1
                ? ResponseEntity.ok("ÏùºÏ†ï ÏàòÏ†ï ÏÑ±Í≥µ")
                : ResponseEntity.badRequest().body("ÏùºÏ†ï ÏàòÏ†ï Ïã§Ìå®");
    }


    @DeleteMapping("/events/{eventCd}")
    public ResponseEntity<String> deleteFile(
            @PathVariable String eventCd,
            @RequestParam(required = false) String userId
    ) {
        int result = personalCalendarService.deletePersonalEvent(eventCd, userId);

        return result == 1
                ? ResponseEntity.ok("ÏùºÏ†ï ÏÇ≠Ï†ú ÏÑ±Í≥µ")
                : ResponseEntity.badRequest().body("ÏùºÏ†ï ÏÇ≠Ï†ú Ïã§Ìå®");
    }

    @GetMapping("/events/{eventCd}/files")
    public ResponseEntity<byte[]> downloadFile(@RequestParam("fileId") String fileId) throws IOException {
        return personalCalendarService.downloadFile(fileId);
    }

}